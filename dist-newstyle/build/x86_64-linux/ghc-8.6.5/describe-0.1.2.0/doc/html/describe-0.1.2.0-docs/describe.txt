-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Combinators for describing binary data structures
--   
--   Combinators for describing binary data structures, which eliminate the
--   boilerplate of having to write isomorphic Get and Put instances.
--   Please see the Github page for examples.
@package describe
@version 0.1.2.0

module Data.Serialize.Descriptor

-- | <tt>Descriptor s a</tt> is an applicative functor that describes the
--   binary structure for a structure <tt>s</tt> while deserializing value
--   <tt>a</tt>.
newtype Descriptor s a
Descriptor :: (Get a, s -> PutM a) -> Descriptor s a

-- | <tt>unwrapGet desc</tt> takes a <a>Descriptor</a> and returns only the
--   internal <a>Get</a> monad.
unwrapGet :: Descriptor s a -> Get a

-- | <tt>unwrapPut s desc</tt> takes the structure being described and a
--   <a>Descriptor</a> for it, and returns the internal <a>PutM</a> monad.
unwrapPut :: s -> Descriptor s a -> PutM ()

-- | Convenience function for <tt>runPut . unwrapPut s</tt>
serialize :: s -> Descriptor s a -> ByteString

-- | Convenience function for <tt>flip runGet bs . unwrapGet</tt>
deserialize :: ByteString -> Descriptor s s -> Either String s
instance GHC.Base.Functor (Data.Serialize.Descriptor.Descriptor s)
instance GHC.Base.Applicative (Data.Serialize.Descriptor.Descriptor s)
instance GHC.Base.Monad (Data.Serialize.Descriptor.Descriptor s)


-- | Big endian combinators.
--   
--   All combinators take a function that takes the structure being
--   described (<tt>a</tt>) and produces the specified data type from it.
--   Most of the time, this will be one of the structure's fields, which
--   are all functions from the structure to the field type.
module Data.Serialize.Descriptor.BE
w8 :: (a -> Word8) -> Descriptor a Word8
w16 :: (a -> Word16) -> Descriptor a Word16
w32 :: (a -> Word32) -> Descriptor a Word32
w64 :: (a -> Word64) -> Descriptor a Word64
i8 :: (a -> Int8) -> Descriptor a Int8
i16 :: (a -> Int16) -> Descriptor a Int16
i32 :: (a -> Int32) -> Descriptor a Int32
i64 :: (a -> Int64) -> Descriptor a Int64
f32 :: (a -> Float) -> Descriptor a Float
f64 :: (a -> Double) -> Descriptor a Double


-- | Little endian combinators.
--   
--   All combinators take a function that takes the structure being
--   described (<tt>a</tt>) and produces the specified data type from it.
--   Most of the time, this will be one of the structure's fields, which
--   are all functions from the structure to the field type.
module Data.Serialize.Descriptor.LE
w8 :: (a -> Word8) -> Descriptor a Word8
w16 :: (a -> Word16) -> Descriptor a Word16
w32 :: (a -> Word32) -> Descriptor a Word32
w64 :: (a -> Word64) -> Descriptor a Word64
i8 :: (a -> Int8) -> Descriptor a Int8
i16 :: (a -> Int16) -> Descriptor a Int16
i32 :: (a -> Int32) -> Descriptor a Int32
i64 :: (a -> Int64) -> Descriptor a Int64
f32 :: (a -> Float) -> Descriptor a Float
f64 :: (a -> Double) -> Descriptor a Double
